
you are micropython esp32 code generator 

you need to write just micropyhton, to copy it directly on micropyhton file, 

I have dict of peripherals object in 'peripherals' dictionary micropython

and I need to use the methods of each peripheral for testing in (run_all_methods) function as following : 
for peripheral accelerometer, the object of MPU6050, which is stored in 'peripherals[accelerometer]', run it's methods as following : 
    the properties of method read_accel, as following : {
  "returns": {
    "dataType": "Array",
    "elementType": "Number",
    "length": 3,
    "unit": "g"
  },
  "purpose": "Returns a tuple of X, Y, Z acceleration values"
}
	the properties of method read_gyro, as following : {
  "returns": {
    "dataType": "Array",
    "elementType": "Number",
    "length": 3,
    "unit": "deg/s"
  },
  "purpose": "Returns a tuple of X, Y, Z gyroscope values"
}
	the properties of method read_all, as following : {
  "returns": {
    "dataType": "Object",
    "properties": {
      "accel": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "g"
      },
      "gyro": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "deg/s"
      }
    }
  },
  "purpose": "Returns both accelerometer and gyroscope readings in one call"
}},for peripheral dht_sensor, the object of DHTSensor, which is stored in 'peripherals[dht_sensor]', run it's methods as following : 
    the properties of method measure, as following : {
  "returns": "void",
  "purpose": "Triggers the sensor to update temperature and humidity readings"
}
	the properties of method temperature, as following : {
  "returns": {
    "dataType": "Number",
    "unit": "°C",
    "range": {
      "min": -40,
      "max": 125
    }
  },
  "purpose": "Returns the last measured temperature value. Range: -40°C to 125°C"
}
	the properties of method humidity, as following : {
  "returns": {
    "dataType": "Number",
    "unit": "%",
    "range": {
      "min": 0,
      "max": 100
    }
  },
  "purpose": "Returns the last measured humidity value. Range: 0% to 100%"
}},for peripheral encoder, the object of Encoder, which is stored in 'peripherals[encoder]', run it's methods as following : 
    the properties of method get_position, as following : {
  "returns": {
    "dataType": "Number",
    "purpose": "Returns the current position of the encoder"
  }
}
	the properties of method reset, as following : {
  "returns": "void",
  "purpose": "Resets the encoder position back to zero"
}
	the properties of method simulate_step, as following : {
  "parameters": {
    "steps": {
      "dataType": "Number",
      "purpose": "Number of steps to increment or decrement position (for simulate mode)"
    }
  },
  "returns": "void",
  "purpose": "Manually updates the encoder position during simulation mode",
  "availability": "Only available when simulate=true"
}},for peripheral gas_sensor, the object of GasSensor, which is stored in 'peripherals[gas_sensor]', run it's methods as following : 
    the properties of method read, as following : {
  "returns": {
    "dataType": "Number",
    "range": {
      "min": 0,
      "max": 1023
    }
  },
  "purpose": "Reads the current gas level from the sensor. Range: 0 to 1023 (analog) or 0/1 (digital)"
}},for peripheral led, the object of LED, which is stored in 'peripherals[led]', run it's methods as following : 
    the properties of method on, as following : {
  "returns": "void",
  "purpose": "Turns the LED ON (sets the state to ON)"
}
	the properties of method off, as following : {
  "returns": "void",
  "purpose": "Turns the LED OFF (sets the state to OFF)"
}
	the properties of method toggle, as following : {
  "returns": "void",
  "purpose": "Toggles the state of the LED (ON if OFF, OFF if ON)"
}
	the properties of method is_on, as following : {
  "returns": {
    "dataType": "Boolean"
  },
  "purpose": "Returns the current state of the LED (True if ON, False if OFF)"
}},for peripheral internal_led, the object of InternalLED, which is stored in 'peripherals[internal_led]', run it's methods as following : 
    the properties of method on, as following : {
  "returns": "void",
  "purpose": "Turns the internal LED ON (sets the state to ON)"
}
	the properties of method off, as following : {
  "returns": "void",
  "purpose": "Turns the internal LED OFF (sets the state to OFF)"
}
	the properties of method toggle, as following : {
  "returns": "void",
  "purpose": "Toggles the state of the internal LED (ON if OFF, OFF if ON)"
}
	the properties of method is_on, as following : {
  "returns": {
    "dataType": "Boolean"
  },
  "purpose": "Returns the current state of the internal LED (True if ON, False if OFF)"
}},for peripheral motion_sensor, the object of MotionSensor, which is stored in 'peripherals[motion_sensor]', run it's methods as following : 
    the properties of method read, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Motion detected",
      "false": "No motion detected"
    }
  },
  "purpose": "Reads the current state of the motion sensor"
}
	the properties of method wait_for_motion, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Motion detected within timeout",
      "false": "No motion detected within timeout"
    }
  },
  "parameters": {
    "timeout": {
      "dataType": "Number",
      "default": 10,
      "unit": "seconds",
      "purpose": "Timeout duration to wait for motion detection"
    }
  },
  "purpose": "Waits for motion detection for a specified timeout period"
}},for peripheral push_button, the object of PushButton, which is stored in 'peripherals[push_button]', run it's methods as following : 
    the properties of method set_simulated_state, as following : {
  "parameters": {
    "pressed": {
      "dataType": "Boolean",
      "values_meaning": {
        "true": "Simulates button pressed",
        "false": "Simulates button released"
      },
      "purpose": "Sets the simulated state of the button (only used in simulation mode)"
    }
  },
  "returns": "void",
  "purpose": "Sets the simulated button state"
}
	the properties of method is_pressed, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Button is pressed",
      "false": "Button is released"
    }
  },
  "purpose": "Checks if the button is pressed or released, applies debounce logic"
}
	the properties of method push, as following : {
  "returns": "void",
  "purpose": "Simulates a button press and release cycle (only for simulation mode)"
}
	the properties of method get_event, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Button was pressed",
      "false": "No button press detected"
    }
  },
  "purpose": "Returns and clears the `was_pressed` flag indicating whether the button was pressed"
}},for peripheral relay, the object of Relay, which is stored in 'peripherals[relay]', run it's methods as following : 
    the properties of method on, as following : {
  "returns": "void",
  "purpose": "Turns the relay ON (sets pin to HIGH or LOW based on active_high)"
}
	the properties of method off, as following : {
  "returns": "void",
  "purpose": "Turns the relay OFF (sets pin to LOW or HIGH based on active_high)"
}
	the properties of method toggle, as following : {
  "returns": "void",
  "purpose": "Toggles the relay state between ON and OFF"
}
	the properties of method is_on, as following : {
  "returns": {
    "dataType": "Boolean"
  },
  "purpose": "Returns the current state of the relay (True if ON, False if OFF)"
}},for peripheral servo_motor, the object of Servo, which is stored in 'peripherals[servo_motor]', run it's methods as following : 
    the properties of method write_angle, as following : {
  "returns": "void",
  "parameters": {
    "angle": {
      "dataType": "Number",
      "range": {
        "min": 0,
        "max": 180
      },
      "unit": "°",
      "purpose": "Sets the servo motor to a specific angle, from 0° to 180°"
    }
  },
  "purpose": "Sets the servo motor's angle by calculating the corresponding pulse width"
}
	the properties of method write_us, as following : {
  "returns": "void",
  "parameters": {
    "us": {
      "dataType": "Number",
      "range": {
        "min": 500,
        "max": 2500
      },
      "unit": "μs",
      "purpose": "Sets the servo motor's pulse width directly in microseconds"
    }
  },
  "purpose": "Sets the servo motor's pulse width directly in microseconds and updates the angle"
}
	the properties of method get_state, as following : {
  "returns": {
    "dataType": "Object",
    "properties": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin the servo is connected to"
      },
      "angle": {
        "dataType": "Number",
        "unit": "°",
        "purpose": "Current angle of the servo motor"
      },
      "pulse_us": {
        "dataType": "Number",
        "unit": "μs",
        "purpose": "Current pulse width of the servo motor"
      }
    }
  },
  "purpose": "Returns the current state of the servo motor including pin, angle, and pulse width"
}
	the properties of method deinit, as following : {
  "returns": "void",
  "purpose": "Deinitializes the servo motor and releases resources"
}},for peripheral slide_switch, the object of SlideSwitch, which is stored in 'peripherals[slide_switch]', run it's methods as following : 
    the properties of method set_simulated_state, as following : {
  "parameters": {
    "state": {
      "dataType": "Boolean",
      "values_meaning": {
        "true": "Simulates turning the switch ON",
        "false": "Simulates turning the switch OFF"
      }
    }
  },
  "returns": "void",
  "purpose": "Sets the internal state of the switch during simulation"
}
	the properties of method read, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Switch is ON",
      "false": "Switch is OFF"
    }
  },
  "purpose": "Reads the current switch state (either simulated or from the actual pin)"
}
	the properties of method state, as following : {
  "returns": {
    "dataType": "Boolean",
    "values_meaning": {
      "true": "Switch is ON",
      "false": "Switch is OFF"
    }
  },
  "purpose": "Property alias for reading the switch state"
}}



