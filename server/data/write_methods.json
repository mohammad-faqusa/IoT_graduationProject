{
  "accelerometer": {},
  "dht_sensor": {
    "measure": {
      "type": "write",
      "label": "Trigger Measurement",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Triggers the sensor to update temperature and humidity readings"
    }
  },
  "encoder": {
    "reset": {
      "type": "write",
      "label": "Reset Position",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Resets the encoder position back to zero"
    },
    "simulate_step": {
      "type": "write",
      "label": "Simulate Step",
      "parameters": [
        {
          "name": "steps",
          "dataType": "Number",
          "range": {
            "min": -1000,
            "max": 1000
          },
          "purpose": "Number of steps to increment or decrement position (for simulate mode)"
        }
      ],
      "returns": {
        "dataType": "void"
      },
      "purpose": "Manually updates the encoder position during simulation mode",
      "availability": "Only available when simulate=true"
    }
  },
  "gas_sensor": {},
  "led": {
    "on": {
      "type": "write",
      "label": "Turn ON",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the LED ON (sets the state to ON)"
    },
    "switch": {
      "type": "write",
      "label": "Switch",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Switch the led ON or OFF, according to parameter value",
      "parameters": [
        {
          "name": "status",
          "dataType": "Boolean",
          "default": false,
          "purpose": "the status boolean value, true : led on, false : led off"
        }
      ]
    },
    "off": {
      "type": "write",
      "label": "Turn OFF",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the LED OFF (sets the state to OFF)"
    },
    "toggle": {
      "type": "write",
      "label": "Toggle",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Toggles the state of the LED (ON if OFF, OFF if ON)"
    }
  },
  "internal_led": {
    "on": {
      "type": "write",
      "label": "Turn ON",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the LED ON (sets the state to ON)"
    },
    "switch": {
      "type": "write",
      "label": "Switch",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Switch the led ON or OFF, according to parameter value",
      "parameters": [
        {
          "name": "status",
          "dataType": "Boolean",
          "default": false,
          "purpose": "the status boolean value, true : led on, false : led off"
        }
      ]
    },
    "off": {
      "type": "write",
      "label": "Turn OFF",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the LED OFF (sets the state to OFF)"
    },
    "toggle": {
      "type": "write",
      "label": "Toggle",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Toggles the state of the LED (ON if OFF, OFF if ON)"
    }
  },
  "motion_sensor": {
    "wait_for_motion": {
      "type": "write",
      "label": "Wait for Motion",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Motion detected within timeout",
          "false": "No motion detected within timeout"
        }
      },
      "parameters": [
        {
          "name": "timeout",
          "dataType": "Number",
          "default": 10,
          "unit": "seconds",
          "range": {
            "min": 0,
            "max": 300
          },
          "purpose": "Timeout duration to wait for motion detection"
        }
      ],
      "purpose": "Waits for motion detection for a specified timeout period"
    }
  },
  "push_button": {
    "set_simulated_state": {
      "type": "write",
      "label": "Set Simulated State",
      "parameters": [
        {
          "name": "pressed",
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Simulates button pressed",
            "false": "Simulates button released"
          },
          "purpose": "Sets the simulated state of the button (only used in simulation mode)"
        }
      ],
      "returns": {
        "dataType": "void"
      },
      "purpose": "Sets the simulated button state"
    },
    "push": {
      "type": "write",
      "label": "Push Button",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Simulates a button press and release cycle (only for simulation mode)"
    }
  },
  "relay": {
    "on": {
      "type": "write",
      "label": "Turn On Relay",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the relay ON (sets pin to HIGH or LOW based on active_high)"
    },
    "off": {
      "type": "write",
      "label": "Turn Off Relay",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Turns the relay OFF (sets pin to LOW or HIGH based on active_high)"
    },
    "toggle": {
      "type": "write",
      "label": "Toggle Relay State",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Toggles the relay state between ON and OFF"
    }
  },
  "servo_motor": {
    "write_angle": {
      "type": "write",
      "label": "Write Angle",
      "parameters": [
        {
          "name": "angle",
          "dataType": "Number",
          "range": {
            "min": 0,
            "max": 180
          },
          "unit": "°",
          "purpose": "Sets the servo motor to a specific angle, from 0° to 180°. The value must be between 0 and 180."
        }
      ],
      "returns": {
        "dataType": "void"
      },
      "purpose": "Sets the servo motor's angle by calculating the corresponding pulse width"
    },
    "write_us": {
      "type": "write",
      "label": "Write Pulse Width",
      "parameters": [
        {
          "name": "us",
          "dataType": "Number",
          "range": {
            "min": 500,
            "max": 2500
          },
          "unit": "μs",
          "purpose": "Sets the servo motor's pulse width directly in microseconds. The value must be between 500 and 2500 μs."
        }
      ],
      "returns": {
        "dataType": "void"
      },
      "purpose": "Sets the servo motor's pulse width directly in microseconds and updates the angle"
    },
    "deinit": {
      "type": "write",
      "label": "Deinitialize",
      "returns": {
        "dataType": "void"
      },
      "purpose": "Deinitializes the servo motor and releases resources"
    }
  },
  "slide_switch": {
    "set_simulated_state": {
      "type": "write",
      "label": "Set Simulated State",
      "parameters": [
        {
          "name": "state",
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Simulates turning the switch ON",
            "false": "Simulates turning the switch OFF"
          },
          "purpose": "Controls the simulated state of the switch"
        }
      ],
      "returns": {
        "dataType": "void"
      },
      "purpose": "Sets the internal state of the switch during simulation"
    }
  }
}