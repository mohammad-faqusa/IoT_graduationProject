{
  "accelerometer": {
    "read_accel": {
      "type": "read",
      "label": "Read Acceleration",
      "returns": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "g",
        "elementNames": [
          "x",
          "y",
          "z"
        ],
        "range": {
          "min": -2,
          "max": 2
        }
      },
      "purpose": "Returns a tuple of X, Y, Z acceleration values"
    },
    "read_gyro": {
      "type": "read",
      "label": "Read Gyroscope",
      "returns": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "deg/s",
        "elementNames": [
          "x",
          "y",
          "z"
        ],
        "range": {
          "min": -250,
          "max": 250
        }
      },
      "purpose": "Returns a tuple of X, Y, Z gyroscope values"
    },
    "read_all": {
      "type": "read",
      "label": "Read All Sensors",
      "returns": {
        "dataType": "Object",
        "properties": {
          "accel": {
            "dataType": "Array",
            "elementType": "Number",
            "length": 3,
            "unit": "g",
            "elementNames": [
              "x",
              "y",
              "z"
            ],
            "range": {
              "min": -2,
              "max": 2
            }
          },
          "gyro": {
            "dataType": "Array",
            "elementType": "Number",
            "length": 3,
            "unit": "deg/s",
            "elementNames": [
              "x",
              "y",
              "z"
            ],
            "range": {
              "min": -250,
              "max": 250
            }
          }
        }
      },
      "purpose": "Returns both accelerometer and gyroscope readings in one call"
    }
  },
  "dht_sensor": {
    "temperature": {
      "type": "read",
      "label": "Read Temperature",
      "returns": {
        "dataType": "Number",
        "unit": "°C",
        "range": {
          "min": -40,
          "max": 125
        }
      },
      "purpose": "Returns the last measured temperature value. Range: -40°C to 125°C"
    },
    "humidity": {
      "type": "read",
      "label": "Read Humidity",
      "returns": {
        "dataType": "Number",
        "unit": "%",
        "range": {
          "min": 0,
          "max": 100
        }
      },
      "purpose": "Returns the last measured humidity value. Range: 0% to 100%"
    }
  },
  "encoder": {
    "get_position": {
      "type": "read",
      "label": "Get Position",
      "returns": {
        "dataType": "Number",
        "range": {
          "min": null,
          "max": null
        }
      },
      "purpose": "Returns the current position of the encoder"
    }
  },
  "gas_sensor": {
    "read": {
      "type": "read",
      "label": "Read Gas Level",
      "returns": {
        "dataType": "Number",
        "range": {
          "min": 0,
          "max": 1023
        }
      },
      "purpose": "Reads the current gas level from the sensor. Range: 0 to 1023 (analog) or 0/1 (digital)"
    }
  },
  "led": {
    "is_on": {
      "type": "read",
      "label": "Check if ON",
      "returns": {
        "dataType": "Boolean"
      },
      "purpose": "Returns the current state of the LED (True if ON, False if OFF)"
    }
  },
  "internal_led": {
    "is_on": {
      "type": "read",
      "label": "Check if ON",
      "returns": {
        "dataType": "Boolean"
      },
      "purpose": "Returns the current state of the LED (True if ON, False if OFF)"
    }
  },
  "motion_sensor": {
    "read": {
      "type": "read",
      "label": "Read Motion State",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Motion detected",
          "false": "No motion detected"
        }
      },
      "purpose": "Reads the current state of the motion sensor"
    }
  },
  "push_button": {
    "is_pressed": {
      "type": "read",
      "label": "Is Pressed",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Button is pressed",
          "false": "Button is released"
        }
      },
      "purpose": "Checks if the button is pressed or released, applies debounce logic"
    },
    "get_event": {
      "type": "read",
      "label": "Get Event",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Button was pressed",
          "false": "No button press detected"
        }
      },
      "purpose": "Returns and clears the `was_pressed` flag indicating whether the button was pressed"
    }
  },
  "relay": {
    "is_on": {
      "type": "read",
      "label": "Check Relay State",
      "returns": {
        "dataType": "Boolean"
      },
      "purpose": "Returns the current state of the relay (True if ON, False if OFF)"
    }
  },
  "servo_motor": {
    "read_angle": {
      "type": "read",
      "label": "Read Angle",
      "returns": {
        "dataType": "Number",
        "range": {
          "min": 0,
          "max": 180
        },
        "unit": "°",
        "purpose": "Returns the current angle of the servo motor, between 0° and 180°"
      },
      "purpose": "Returns the current angle of the servo motor"
    },
    "read_us": {
      "type": "read",
      "label": "Read Pulse Width",
      "returns": {
        "dataType": "Number",
        "range": {
          "min": 500,
          "max": 2500
        },
        "unit": "μs",
        "purpose": "Returns the current pulse width of the servo motor, between 500μs and 2500μs"
      },
      "purpose": "Returns the current pulse width of the servo motor"
    }
  },
  "slide_switch": {
    "read": {
      "type": "read",
      "label": "Read Switch State",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Switch is ON",
          "false": "Switch is OFF"
        }
      },
      "purpose": "Reads the current switch state (either simulated or from the actual pin)"
    },
    "state": {
      "type": "read",
      "label": "State Alias",
      "returns": {
        "dataType": "Boolean",
        "values_meaning": {
          "true": "Switch is ON",
          "false": "Switch is OFF"
        }
      },
      "purpose": "Property alias for reading the switch state"
    }
  }
}