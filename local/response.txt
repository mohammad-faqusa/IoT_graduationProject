```python
from machine import Pin, ADC, PWM
import dht
import time

# ** define pins
DHT_PIN = 12
GAS_SENSOR_PIN = 34
SERVO_PIN = 13
OUTPUT_SWITCH_1_PIN = 25
OUTPUT_SWITCH_2_PIN = 26

# ** initialize objects from peripherals libraries
dht_sensor = dht.DHT22(Pin(DHT_PIN))
gas_sensor = ADC(Pin(GAS_SENSOR_PIN))
servo = PWM(Pin(SERVO_PIN), freq=50)
output_switch_1 = Pin(OUTPUT_SWITCH_1_PIN, Pin.OUT)
output_switch_2 = Pin(OUTPUT_SWITCH_2_PIN, Pin.OUT)

# ** type read functions for peripherals
def read_dht():
    dht_sensor.measure()
    return (dht_sensor.temperature(), dht_sensor.humidity())

def read_gas_sensor():
    return gas_sensor.read()

def read_servo_position():
    # Example placeholder as servo typically does not have read functionality
    return None

def read_output_switch_1():
    return output_switch_1.value()

def read_output_switch_2():
    return output_switch_2.value()

# ** type write functions for peripherals
def write_servo_position(angle):
    pulse_width = (angle / 180) + 0.5  # Convert angle to pulse width
    servo.duty(int(pulse_width * 1023))  # Assuming 10-bit resolution

def write_output_switch_1(state):
    output_switch_1.value(state)

def write_output_switch_2(state):
    output_switch_2.value(state)

# ** write a dictionary to store read/write functions
peripheral_functions = {
    'read_dht': ([None, None], read_dht),
    'read_gas_sensor': ([int, None], read_gas_sensor),
    'read_servo_position': ([None, None], read_servo_position),
    'read_output_switch_1': ([int, None], read_output_switch_1),
    'read_output_switch_2': ([int, None], read_output_switch_2),

    'write_servo_position': ([None, int], write_servo_position),
    'write_output_switch_1': ([None, int], write_output_switch_1),
    'write_output_switch_2': ([None, int], write_output_switch_2),
}
```