the user choose components 
    sensors 
        dht 
        motion
        light sensor
    actuators 
        servo motor 
        switch 
    
    automation logic 
        input state
        output state 
            time / no time 

flash process 
    chat gpt message 
    code template 
    generate functions for 
        read 
        write 
        peripheral pins 
        automation logic 
    check for libraries, and install it if new 


user monitor 
    render the components 
    read messages 
    control 
        instance outptu 
        automation logic 


requirements : 
    
**architecture 
    back end : 
        automatio logic are stored in data base, not in microcontroller code, and they are passed as parameter JSON to automation logic function 
    user interface 
        the user request data JSON from microcontroller 
            device variables/ input state , output state 
            read/write readonly variables 
        the automation fields are displayed independently 
            can be deleted, edited, add more automation logics

steps : 
    determine the best message, code template for chat gpt 
        begin with no automation logic 


code template : 
    libraries 
        dht library 
    mqtt/ wifi credentials 
        sub 
            esp32/deviceName/input
                pin connection 
                variables template
                read vairables 
                write to determined variables 
        publish
            esp32/deviceName/output
                pin connection 
                variables template
                    each variable : type , range 
                return updated values of variables 
    setup 
    call back 
        publish request is called inside callback 

    loop 
        read variables 


request code from chat gpt 
    write the required code for esp32 wroom 32, and consider the following : 
        the peripheral devices are used :[dht22, gas sensor, output digital signal 1(led), output digital signal 2(motor enable)]
        represent them by writing all variables wether are assigned from methods of peripheral libraries, or directly from pin, to read/write the values of peripherals, and put them all in one dict. to access them easily.
        this dict can be read/written at any time, to update the values of peripherals. the dict is named as variables_dict
        write a function that return the information of variables in variables_dict (data type of each variable, the range of each variable if it is numeric value,), and all written in one dict called variables_types
        write a function the return information of the pins connection for each variable, and all written in dict called peripheral_pins 
        as following tamplate code : 
            // libraries 

            //wifi setupt 
            //mqtt setup 
        
            //setup all peripherals 
            //initialize variables_dict 
            //loop through variables_dict, and assign values by reading directly from pins, or methods of peripheral library
            //callback : 
                listen to one topic : esp32/input 
                the message content : is in json format that has mentioned variables in variables_dict, or read other dicts like {variables_types, peripheral_pins}
                update the mentioned variables,
                publish  (updated variables_dict, and other dicts if mentioned in input massage). to mqtt topic esp32/output
            //loop
                read all peripheral status, and update vairables_dict 


